import os

def get_file_content(file_path):
    """Reads the content of a file and returns it as a string."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return f"Error: File not found at {os.path.abspath(file_path)}"
    except Exception as e:
        return f"An error occurred: {e}"

def create_llm_prompt():
    """
    Generates a detailed prompt for an LLM to solve the KiCad reference designator bug.
    This script assumes it is being run from the root of the Circuit_Synth project.
    """
    # --- File Paths (relative to project root) ---
    schematic_writer_path = 'circuit_synth_repos/Circuit_Synth_Core/src/circuit_synth_core/kicad/sch_gen/schematic_writer.py'
    correct_schematic_path = 'reference_design_files/reference_desgin2/reference_design/resistor_divider2.kicad_sch'
    buggy_schematic_path = 'reference_design_files/reference_desgin2/debug_reference_design/debug_reference_design/resistor_divider2.kicad_sch'

    # --- Get File Contents ---
    schematic_writer_code = get_file_content(schematic_writer_path)
    correct_schematic_content = get_file_content(correct_schematic_path)
    buggy_schematic_content = get_file_content(buggy_schematic_path)

    # --- Construct the Prompt ---
    prompt = f"""
# KiCad Hierarchical Schematic Reference Designator Bug

## 1. Detailed Problem Description

I am encountering a bug in a Python-based KiCad schematic generation tool. The tool is designed to create hierarchical schematics, but it's failing to correctly assign reference designators (e.g., R1, C1) on the second level of the hierarchy and beyond.

- **Top-Level Sheet:** Components on the main schematic sheet are correctly labeled (e.g., R3, R4).
- **Sub-Sheets (2nd+ Level):** Components on any sub-sheet are incorrectly labeled with a question mark (e.g., R?, C?).

This makes the generated hierarchical schematics unusable, as the components cannot be identified. The issue seems to be related to how the hierarchical paths and component instances are being defined in the generated `.kicad_sch` files. It is likely a UUID mapping issue or a problem with the schematic's S-expression structure.

## 2. What We've Tried (Summary of Debugging)

- **Verified Data Correctness:** Confirmed that the input data (JSON netlist) contains the correct reference designators for all components, including those in sub-sheets.
- **Logged the `SchematicWriter`:** Added extensive logging to the `schematic_writer.py` file. The logs show that the correct references are being assigned to the component objects in memory during the generation process.
- **Inspected Generated Files:** The final `.kicad_sch` files for the sub-sheets contain the "?" references, despite the in-memory objects being correct just before writing to disk.
- **Compared to a Working Reference:** We have a manually created KiCad project that works correctly. The key difference appears to be in the `(instances ...)` block within each `(symbol ...)` definition in the schematic files.
- **Attempted Fixes:**
    - Initially, we were generating a global `(symbol_instances ...)` table at the end of the file. This is the old KiCad format.
    - We modified the code to generate per-symbol `(instances ...)` blocks, which is the new format (KiCad version 20250114+).
    - We also tried removing the global `symbol_instances` table.

Despite these efforts, the bug persists. The generated `(instances ...)` blocks seem to have the correct hierarchical UUID paths and references, but KiCad still fails to display them correctly.

## 3. Relevant Files for Analysis

Here are the files needed to diagnose the problem.

### File 1: `schematic_writer.py`
This is the core Python script responsible for generating the KiCad schematic files. It takes an in-memory circuit representation and converts it into the S-expression format used by KiCad.

```python
{schematic_writer_code}
```

### File 2: `resistor_divider2.kicad_sch` (Correct Reference)
This is a hand-crafted KiCad schematic file for the sub-sheet that works correctly. It should be used as the "gold standard" for the expected output format.

```kicad_sch
{correct_schematic_content}
```

### File 3: `resistor_divider2.kicad_sch` (Buggy Generated File)
This is the schematic file for the sub-sheet generated by our Python script. This file exhibits the bug where all component references are displayed with a "?".

```kicad_sch
{buggy_schematic_content}
```

## 4. The Task

Your task is to analyze the provided Python code and the two schematic files to identify the root cause of the reference designator bug. Please provide a detailed explanation of the problem and a precise, actionable solution. The solution should be a code modification to the `schematic_writer.py` file that fixes the issue.
"""
    return prompt

if __name__ == "__main__":
    llm_prompt = create_llm_prompt()
    output_path = 'reference_design_files/reference_desgin2/llm_prompt_for_kicad_bug.txt'
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(llm_prompt)
    print(f"Generated LLM prompt and saved to '{output_path}'")