name: Rust Unit Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'rust_modules/**'
      - 'scripts/test_rust_modules.sh'
      - '.github/workflows/rust-tests.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'rust_modules/**'
      - 'scripts/test_rust_modules.sh'
      - '.github/workflows/rust-tests.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-tests:
    name: Run Rust Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust_modules/*/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq build-essential
        
    - name: Install Python and uv (for integration tests)
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install maturin (for Python-Rust integration)
      run: |
        pip install maturin
        
    - name: Make test script executable
      run: chmod +x scripts/test_rust_modules.sh
      
    - name: Run Rust unit tests
      run: |
        ./scripts/test_rust_modules.sh --verbose
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rust-test-results
        path: rust_test_results.json
        retention-days: 30
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'rust_test_results.json';
          
          if (!fs.existsSync(path)) {
            console.log('No test results file found');
            return;
          }
          
          const results = JSON.parse(fs.readFileSync(path, 'utf8'));
          const { summary } = results;
          
          let comment = `## 🦀 Rust Unit Test Results\n\n`;
          comment += `| Metric | Count |\n`;
          comment += `|--------|-------|\n`;
          comment += `| 📦 Total Modules | ${summary.total_modules} |\n`;
          comment += `| ✅ Passing | ${summary.passing_modules} |\n`;
          comment += `| ❌ Failing | ${summary.failing_modules} |\n`;
          comment += `| ⏭️ Skipped | ${summary.skipped_modules} |\n\n`;
          
          if (summary.failing_modules > 0) {
            comment += `### ❌ Failed Modules\n\n`;
            for (const [moduleName, moduleResult] of Object.entries(results.modules)) {
              if (moduleResult.status === 'failed') {
                comment += `- **${moduleName}**: ${moduleResult.tests_passed} passed, ${moduleResult.tests_failed} failed\n`;
                if (moduleResult.error_message) {
                  comment += `  - Error: ${moduleResult.error_message}\n`;
                }
              }
            }
          } else if (summary.passing_modules > 0) {
            comment += `### ✅ All Rust tests passing!\n\n`;
            comment += `All ${summary.passing_modules} tested modules have passing unit tests.\n`;
          }
          
          comment += `\n<details>\n<summary>📊 Detailed Results</summary>\n\n`;
          comment += `\`\`\`json\n${JSON.stringify(results, null, 2)}\n\`\`\`\n\n</details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  rust-clippy:
    name: Run Rust Clippy Lints
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust_modules/*/target/
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-
          ${{ runner.os }}-cargo-
          
    - name: Run Clippy for all Rust modules
      run: |
        for module_dir in rust_modules/rust_*; do
          if [ -d "$module_dir" ] && [ -f "$module_dir/Cargo.toml" ]; then
            echo "🔍 Running Clippy for $(basename "$module_dir")..."
            cd "$module_dir"
            cargo clippy --lib --no-default-features -- -D warnings || echo "⚠️ Clippy warnings in $(basename "$module_dir")"
            cd - > /dev/null
          fi
        done

  rust-format:
    name: Check Rust Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt
        
    - name: Check Rust code formatting
      run: |
        for module_dir in rust_modules/rust_*; do
          if [ -d "$module_dir" ] && [ -f "$module_dir/Cargo.toml" ]; then
            echo "📝 Checking format for $(basename "$module_dir")..."
            cd "$module_dir"
            cargo fmt --check || (echo "❌ Code formatting issues in $(basename "$module_dir")" && exit 1)
            cd - > /dev/null
          fi
        done