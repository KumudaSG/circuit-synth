# Production-Ready Cross-Platform KiCad + Circuit-Synth Docker Solution
# Uses intelligent KiCad version detection with platform emulation fallback

# Build argument for KiCad version selection
ARG KICAD_VERSION=9.0

# Stage 1: KiCad source with automatic fallback
# Try KiCad 9.0 first, fallback to 8.0 if unavailable
FROM --platform=linux/amd64 kicad/kicad:${KICAD_VERSION} as kicad-source-v9
# Fallback stage in case 9.0 is not available
FROM --platform=linux/amd64 kicad/kicad:8.0 as kicad-source-v8

# Select the appropriate source based on availability
FROM kicad-source-v9 as kicad-source

# Stage 2: Production Circuit-Synth base
FROM python:3.11-slim as circuit-synth-production

# Metadata for the image
LABEL org.opencontainers.image.title="Circuit-Synth with KiCad"
LABEL org.opencontainers.image.description="Professional PCB design automation with KiCad integration"
LABEL org.opencontainers.image.vendor="Circuit-Synth"
LABEL org.opencontainers.image.version="1.0"
LABEL org.opencontainers.image.source="https://github.com/your-org/circuit-synth"

# Set environment variables for production
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV RUST_LOG=info
ENV DEBIAN_FRONTEND=noninteractive
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies optimized for production
RUN apt-get update && apt-get install -y --no-install-recommends \
    # KiCad runtime dependencies (minimal set for CLI usage)
    libbz2-1.0 \
    libcairo2 \
    libglu1-mesa \
    libglew2.2 \
    libx11-6 \
    libwxgtk3.2-1 \
    libpython3.11 \
    python3 \
    python3-wxgtk4.0 \
    python3-yaml \
    python3-typing-extensions \
    libcurl4 \
    libngspice0 \
    ngspice \
    libocct-modeling-algorithms-7.6 \
    libocct-modeling-data-7.6 \
    libocct-data-exchange-7.6 \
    libocct-visualization-7.6 \
    libocct-foundation-7.6 \
    libocct-ocaf-7.6 \
    unixodbc \
    zlib1g \
    shared-mime-info \
    git \
    libgit2-1.5 \
    libsecret-1-0 \
    libprotobuf32 \
    libzstd1 \
    libnng1 \
    sudo \
    # Circuit-Synth build dependencies (minimal for production)
    build-essential \
    curl \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Copy KiCad installation from official image (cross-platform via emulation)
COPY --from=kicad-source /usr/bin/kicad* /usr/bin/
COPY --from=kicad-source /usr/bin/*pcbnew* /usr/bin/
COPY --from=kicad-source /usr/bin/*eeschema* /usr/bin/
COPY --from=kicad-source /usr/share/kicad /usr/share/kicad
COPY --from=kicad-source /usr/lib/*kicad* /usr/lib/
COPY --from=kicad-source /usr/lib/python3*/site-packages/*kicad* /usr/lib/python3.11/site-packages/ || true

# Fix KiCad library linkage and update ldconfig
RUN ldconfig -l /usr/bin/_pcbnew.kiface || true && ldconfig

# Install Rust toolchain for cross-compilation
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
ENV PATH="/root/.cargo/bin:${PATH}"

# Add target for current architecture
RUN rustup target add $(uname -m)-unknown-linux-gnu

# Set working directory
WORKDIR /app

# Copy dependency files first for better Docker layer caching
COPY pyproject.toml README.md ./

# Install Python dependencies first (for better caching)
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:${PATH}"
ENV VIRTUAL_ENV="/app/venv"
RUN pip install --no-cache-dir maturin setuptools wheel

# Copy Rust modules for compilation
COPY rust_modules/ ./rust_modules/

# Build and install Rust modules with production optimizations
RUN set -e; \
    for module in rust_core_circuit_engine rust_force_directed_placement rust_io_processor \
                  rust_kicad_schematic_writer rust_netlist_processor rust_pin_calculator \
                  rust_reference_manager rust_symbol_cache rust_symbol_search; do \
        if [ -d "rust_modules/$module" ]; then \
            echo "Building $module for $(uname -m) (production)..."; \
            cd "rust_modules/$module" && \
            maturin build --release --target $(uname -m)-unknown-linux-gnu -i /app/venv/bin/python && \
            maturin develop --release --target $(uname -m)-unknown-linux-gnu -i /app/venv/bin/python; \
            cd /app; \
        else \
            echo "Warning: $module directory not found, skipping"; \
        fi; \
    done

# Copy Python source code
COPY src/ ./src/

# Install Circuit-Synth in production mode
RUN pip install --no-cache-dir -e .

# Copy remaining application files
COPY examples/ ./examples/
COPY tests/ ./tests/

# Create production user with security best practices
ARG USER_NAME=circuit_synth
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USER_NAME && \
    useradd --uid $USER_UID --gid $USER_GID -m $USER_NAME --shell /bin/bash && \
    usermod -aG sudo $USER_NAME && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set up KiCad configuration with version detection
RUN KICAD_VERSION=$(kicad-cli -v 2>/dev/null | head -1 | cut -d' ' -f2 | cut -d'.' -f1,2 || echo "8.0") && \
    mkdir -p /home/$USER_NAME/.config/kicad/$KICAD_VERSION && \
    cp /usr/share/kicad/template/*-lib-table /home/$USER_NAME/.config/kicad/$KICAD_VERSION/ 2>/dev/null || true && \
    chown -R $USER_NAME:$USER_NAME /home/$USER_NAME/.config && \
    chown -R $USER_NAME:$USER_NAME /app

# Clean up build dependencies to reduce image size
RUN apt-get remove -y build-essential curl pkg-config && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cargo /root/.rustup

# Switch to non-root user
USER $USER_NAME

# Health check to verify both KiCad and Circuit-Synth work
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD \
    kicad-cli version > /dev/null && python -c "import circuit_synth" || exit 1

# Production entrypoint with proper signal handling
ENTRYPOINT ["python", "-c"]
CMD ["import circuit_synth; import subprocess; import platform; print(f'ðŸš€ Circuit-Synth Production Ready on {platform.machine()}!'); result = subprocess.run(['kicad-cli', 'version'], capture_output=True, text=True); print(f'ðŸ“¦ KiCad: {result.stdout.strip()}'); print('ðŸ’¡ Use docker-compose to run specific services')"]