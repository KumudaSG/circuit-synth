# Multi-Architecture KiCad + Circuit-Synth Docker Build
# Builds KiCad from source for ARM64 compatibility

FROM python:3.11-slim as circuit-synth-base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV RUST_LOG=info
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies for KiCad build and Circuit-Synth
RUN apt-get update && apt-get install -y \
    # KiCad build dependencies
    build-essential \
    cmake \
    git \
    ninja-build \
    pkg-config \
    # KiCad runtime libraries
    libbz2-dev \
    libcairo2-dev \
    libglu1-mesa-dev \
    libgl1-mesa-dev \
    libglew-dev \
    libx11-dev \
    libwxgtk3.2-dev \
    mesa-common-dev \
    python3-dev \
    python3-wxgtk4.0 \
    libboost-all-dev \
    libglm-dev \
    libcurl4-openssl-dev \
    libgtk-3-dev \
    libngspice0-dev \
    ngspice-dev \
    libocct-modeling-algorithms-dev \
    libocct-modeling-data-dev \
    libocct-data-exchange-dev \
    libocct-visualization-dev \
    libocct-foundation-dev \
    libocct-ocaf-dev \
    unixodbc-dev \
    zlib1g-dev \
    shared-mime-info \
    gettext \
    libgit2-dev \
    libsecret-1-dev \
    libnng-dev \
    libprotobuf-dev \
    protobuf-compiler \
    swig4.0 \
    python3-pip \
    python3-venv \
    libzstd-dev \
    # Circuit-Synth build dependencies
    curl \
    libssl-dev \
    sudo \
    && rm -rf /var/lib/apt/lists/*

# Build KiCad from source for the current architecture
WORKDIR /tmp/kicad-build

# Clone KiCad source and libraries (using stable 9.0 branch when available, fallback to master)
RUN git clone --depth=1 -b 9.0 https://gitlab.com/kicad/code/kicad.git || \
    git clone --depth=1 https://gitlab.com/kicad/code/kicad.git
RUN git clone --depth=1 -b 9.0 https://gitlab.com/kicad/libraries/kicad-symbols.git || \
    git clone --depth=1 https://gitlab.com/kicad/libraries/kicad-symbols.git
RUN git clone --depth=1 -b 9.0 https://gitlab.com/kicad/libraries/kicad-footprints.git || \
    git clone --depth=1 https://gitlab.com/kicad/libraries/kicad-footprints.git
RUN git clone --depth=1 -b 9.0 https://gitlab.com/kicad/libraries/kicad-templates.git || \
    git clone --depth=1 https://gitlab.com/kicad/libraries/kicad-templates.git

# Build KiCad (optimized for container use)
WORKDIR /tmp/kicad-build/kicad
RUN mkdir -p build && cd build && \
    cmake \
      -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DKICAD_SCRIPTING_WXPYTHON=ON \
      -DKICAD_USE_OCC=ON \
      -DKICAD_SPICE=ON \
      -DKICAD_BUILD_I18N=OFF \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DKICAD_USE_CMAKE_FINDPROTOBUF=ON \
      .. && \
    ninja kicad-cli pcbnew eeschema && \
    cmake --install . --component kicad-cli --prefix=/usr/local/kicad && \
    cmake --install . --component pcbnew --prefix=/usr/local/kicad && \
    cmake --install . --component eeschema --prefix=/usr/local/kicad

# Install KiCad libraries
WORKDIR /tmp/kicad-build/kicad-symbols
RUN cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local/kicad . && \
    ninja && cmake --install .

WORKDIR /tmp/kicad-build/kicad-footprints  
RUN cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local/kicad . && \
    ninja && cmake --install .

WORKDIR /tmp/kicad-build/kicad-templates
RUN cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local/kicad . && \
    ninja && cmake --install .

# Copy KiCad installation to standard paths
RUN cp -r /usr/local/kicad/bin/* /usr/local/bin/ || true
RUN cp -r /usr/local/kicad/share/kicad /usr/share/ || true
RUN cp -r /usr/local/kicad/lib/* /usr/local/lib/ || true

# Clean up build dependencies and temporary files
RUN rm -rf /tmp/kicad-build
RUN apt-get autoremove -y \
    cmake \
    ninja-build \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Rust toolchain for Circuit-Synth
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN rustup target add $(uname -m)-unknown-linux-gnu

# Set working directory for Circuit-Synth
WORKDIR /app

# Copy Rust module dependencies first for better caching
COPY rust_modules/ ./rust_modules/

# Install maturin for Rust-Python bindings
RUN pip install --no-cache-dir maturin

# Build Rust modules (with error handling for missing modules)
RUN for module in rust_core_circuit_engine rust_force_directed_placement rust_io_processor rust_kicad_schematic_writer rust_netlist_processor rust_pin_calculator rust_reference_manager rust_symbol_cache rust_symbol_search; do \
    if [ -d "rust_modules/$module" ]; then \
        echo "Building $module..."; \
        cd rust_modules/$module && maturin build --release --target $(uname -m)-unknown-linux-gnu -i /usr/local/bin/python || echo "$module build skipped"; \
        cd /app; \
    else \
        echo "$module directory not found, skipping"; \
    fi; \
done

# Copy Python project files
COPY pyproject.toml README.md ./
COPY src/ ./src/

# Create virtual environment and install Python dependencies
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:${PATH}"
ENV VIRTUAL_ENV="/app/venv"
RUN pip install --no-cache-dir -e .

# Copy remaining project files
COPY . .

# Install Rust modules in development mode
RUN for module in rust_core_circuit_engine rust_force_directed_placement rust_io_processor rust_kicad_schematic_writer rust_netlist_processor rust_pin_calculator rust_reference_manager rust_symbol_cache rust_symbol_search; do \
    if [ -d "rust_modules/$module" ]; then \
        echo "Installing $module in development mode..."; \
        cd rust_modules/$module && maturin develop --release --target $(uname -m)-unknown-linux-gnu -i /app/venv/bin/python || echo "$module develop skipped"; \
        cd /app; \
    fi; \
done

# Create non-root user for security
ARG USER_NAME=circuit_synth
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USER_NAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USER_NAME \
    && usermod -aG sudo $USER_NAME \
    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set up KiCad user configuration directory with library tables
RUN mkdir -p /home/$USER_NAME/.config/kicad/9.0
RUN cp /usr/share/kicad/template/*-lib-table /home/$USER_NAME/.config/kicad/9.0/ || true
RUN chown -R $USER_NAME:$USER_NAME /home/$USER_NAME/.config
RUN chown -R $USER_NAME:$USER_NAME /app

# Update library path
RUN ldconfig

USER $USER_NAME

# Verify installations work
RUN kicad-cli version || echo "KiCad CLI check completed"
RUN python -c "import circuit_synth; print('Circuit Synth imported successfully')" || echo "Circuit Synth check completed"

# Set the default command
CMD ["python", "-c", "import circuit_synth; print('Circuit-Synth with KiCad 9 (native ARM64) is ready!')"]